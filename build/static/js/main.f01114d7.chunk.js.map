{"version":3,"sources":["components/navbar/Navbar.js","components/image_results/ImageResult.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","title","ImageReasults","state","open","currentImg","handleOpen","img","setState","handleClose","imageListContent","images","this","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","modal","onRequestClose","style","width","React","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","name","axios","get","then","res","data","hits","catch","err","console","log","onAmountChange","index","onChange","floatingLabelText","fullWidth","primaryText","length","ImageResult","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f01114d7.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from 'material-ui/AppBar';\n\nconst NavBar = () => <AppBar title=\"PixaBay Image Finder\"/>\n\nexport default NavBar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageReasults extends React.Component {\n    state = {\n        open: false,\n        currentImg: ''\n    }\n\n    handleOpen = img => {\n        this.setState({open: true, currentImg: img});\n    }\n\n    handleClose = () => {\n        this.setState({open: false});\n    }\n\n    render() {\n        let imageListContent;\n        const { images } = this.props;\n\n        if(images) {\n            imageListContent = (\n                <GridList cols={3}>\n                    {images.map(img => (\n                        <GridTile\n                        title={img.tags}\n                        key={img.id}\n                        subtitle={\n                            <span>\n                                by <strong>{img.user}</strong>\n                            </span>\n                        }\n                        actionIcon={\n                            <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\n                                <ZoomIn color=\"white\" />\n                            </IconButton>\n                        }\n                        >\n                            <img src={img.largeImageURL} alt=\"\"/>\n                        </GridTile>\n                    ))}\n                </GridList>\n            )\n        } else {\n            imageListContent = null;\n        }\n\n        const actions = [\n            <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\n        ]\n\n        return (\n            <div>\n                {imageListContent}\n                <Dialog\n                    actions={actions}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={this.handleClose}\n                >\n                    <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }}/>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nImageReasults.propTypes = {\n    image: PropTypes.array.isRequired\n}\n\nexport default ImageReasults;","import React, { Component } from 'react'\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField'\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\nimport ImageResults from '../image_results/ImageResult';\n\nclass Search extends React.Component {\n    state = {\n        searchText: '',\n        amount: 15,\n        apiUrl: 'https://pixabay.com/api',\n        apiKey: '13687129-a119a832d1ca2af31695ae016',\n        images: []\n    }\n\n    onTextChange = e => {\n        const val = e.target.value\n        this.setState({[e.target.name]: val}, () => {\n            if(val === '') {\n                this.setState({images: []});\n            } else {\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n                .then(res => this.setState({images: res.data.hits}))\n                .catch(err => console.log(err));\n            }\n        })\n    }\n\n    onAmountChange = (e, index, value) => this.setState({amount: value})\n\n    render() {\n        console.log(this.state.images);\n        return (\n            <div>\n                <TextField \n                name=\"searchText\"\n                value={this.state.searchText}\n                onChange={this.onTextChange}\n                floatingLabelText=\"Search For Images\"\n                fullWidth={true}\n                />\n                <br/>\n                <SelectField\n                name=\"amount\"\n                floatingLabelText=\"Amount\"\n                value={this.state.amount}\n                onChange={this.onAmountChange}\n                >\n                    <MenuItem value={5} primaryText=\"5\" />\n                    <MenuItem value={10} primaryText=\"10\" />\n                    <MenuItem value={15} primaryText=\"15\" />\n                    <MenuItem value={30} primaryText=\"30\" />\n                    <MenuItem value={50} primaryText=\"50\" />\n                </SelectField>\n                <br />\n                {this.state.images.length > 0 ? (<ImageResults images={this.state.images}/>) : null}\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport NavBar from './components/navbar/Navbar'\nimport Search from './components/search/Search'\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n      <div>\n        <NavBar />\n        <Search />\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}